// Code generated by mockery v1.0.0. DO NOT EDIT.

package stream

import event "github.com/openaustralia/yinyo/pkg/event"
import mock "github.com/stretchr/testify/mock"

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// Add provides a mock function with given fields: key, _a1
func (_m *MockClient) Add(key string, _a1 event.Event) (event.Event, error) {
	ret := _m.Called(key, _a1)

	var r0 event.Event
	if rf, ok := ret.Get(0).(func(string, event.Event) event.Event); ok {
		r0 = rf(key, _a1)
	} else {
		r0 = ret.Get(0).(event.Event)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, event.Event) error); ok {
		r1 = rf(key, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: key
func (_m *MockClient) Delete(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: key, id
func (_m *MockClient) Get(key string, id string) (event.Event, error) {
	ret := _m.Called(key, id)

	var r0 event.Event
	if rf, ok := ret.Get(0).(func(string, string) event.Event); ok {
		r0 = rf(key, id)
	} else {
		r0 = ret.Get(0).(event.Event)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(key, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
