name: Test, Build and Release
on: 
  push:
  pull_request:
  release:
    types: published
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13.x

      - name: setup env
        run: |
          echo "::set-env name=GOPATH::$(go env GOPATH)"
          echo "::add-path::$(go env GOPATH)/bin"
        shell: bash

      - name: Checkout code ""
        uses: actions/checkout@v1
      - uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install golangci-lint
        run: |
          go get github.com/golangci/golangci-lint/cmd/golangci-lint

      - name: Run linters
        run: |
          golangci-lint run

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
      - name: setup env
        run: |
          echo "::set-env name=GOPATH::$(go env GOPATH)"
          echo "::add-path::$(go env GOPATH)/bin"
        shell: bash

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
      - uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi

      - name: Test
        run: go test ./... -short

  coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        if: success()
        uses: actions/setup-go@v1
        with:
          go-version: 1.13.x
      - name: setup env
        run: |
          echo "::set-env name=GOPATH::$(go env GOPATH)"
          echo "::add-path::$(go env GOPATH)/bin"
        shell: bash

      - name: Checkout code
        uses: actions/checkout@v1
      - uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      

      - name: Calc coverage
        run: |
          go test -v -short -covermode=count -coverprofile=coverage.out ./...

      - name: Send coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.github_token }}
        run: |
          GO111MODULE=off go get github.com/mattn/goveralls
          $(go env GOPATH)/bin/goveralls -coverprofile=coverage.out -service=github
  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix: #Duplicated below because anchors aren't supported :/
        goarch: ["amd64", "arm", "arm64", "386"]
        goos: ["linux", "darwin", "windows"]
        exclude:
          - goos: "darwin"
            goarch: "arm"
          - goos: "darwin"
            goarch: "arm64"
          - goos: "darwin"
            goarch: "386"
          - goos: "windows"
            goarch: "arm"
          - goos: "windows"
            goarch: "arm64"
    steps:
      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13.x
      - name: Checkout code
        uses: actions/checkout@v1
      - run: |
          echo "::set-env name=GOCACHE::$(go env GOCACHE)"
      - uses: actions/cache@v1
        with:
          path: ${{ env.GOCACHE }}
          key: ${{ runner.os }}-gobuild-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gobuild-
      - uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: build
        env:
          GO111MODULE: on
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir bin
          # See https://github.com/golang/go/issues/34535
          # This actually builds bin/command-line-arguments. Eek.
          # This will be fixed in go 1.14 I think
          go build -o bin cmd/yinyo/yinyo.go
      - name: upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: yinyo_${{ matrix.goos }}_${{ matrix.goarch }}
          path: bin
  release:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        goarch: ["amd64", "arm", "arm64", "386"]
        goos: ["linux", "darwin", "windows"]
        exclude:
          - goos: "darwin"
            goarch: "arm"
          - goos: "darwin"
            goarch: "arm64"
          - goos: "darwin"
            goarch: "386"
          - goos: "windows"
            goarch: "arm"
          - goos: "windows"
            goarch: "arm64"
    if: github.event_name == 'release'
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: yinyo_${{ matrix.goos }}_${{ matrix.goarch }}
      - name: set variables
        run: |
          echo "::set-env name=VERSION::$(echo ${{ github.ref }} | sed 's@refs/[^/]*/v\?@@')"
        shell: bash
      - name: debug
        run: |
          ls
          ls yinyo_${{ matrix.goos }}_${{ matrix.goarch }}
          echo "::set-env name=BINARY::$(ls yinyo_${{ matrix.goos }}_${{ matrix.goarch }})
      - name: Go Release Binary
        uses: Shopify/upload-to-release@1.0.0
        with:
          name: yinyo_${{ env.VERSION }}_${{ matrix.goos }}_${{ matrix.goarch }}
          path: yinyo_${{ matrix.goos }}_${{ matrix.goarch }}/${{ env.BINARY }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}