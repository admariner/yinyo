// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import protocol "github.com/openaustralia/yinyo/pkg/protocol"

// Stream is an autogenerated mock type for the Stream type
type Stream struct {
	mock.Mock
}

// Add provides a mock function with given fields: key, event
func (_m *Stream) Add(key string, event protocol.Event) (protocol.Event, error) {
	ret := _m.Called(key, event)

	var r0 protocol.Event
	if rf, ok := ret.Get(0).(func(string, protocol.Event) protocol.Event); ok {
		r0 = rf(key, event)
	} else {
		r0 = ret.Get(0).(protocol.Event)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, protocol.Event) error); ok {
		r1 = rf(key, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: key
func (_m *Stream) Delete(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: key, id
func (_m *Stream) Get(key string, id string) (protocol.Event, error) {
	ret := _m.Called(key, id)

	var r0 protocol.Event
	if rf, ok := ret.Get(0).(func(string, string) protocol.Event); ok {
		r0 = rf(key, id)
	} else {
		r0 = ret.Get(0).(protocol.Event)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(key, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
