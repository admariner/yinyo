// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import commands "github.com/openaustralia/yinyo/pkg/commands"
import io "io"
import mock "github.com/stretchr/testify/mock"
import protocol "github.com/openaustralia/yinyo/pkg/protocol"

// App is an autogenerated mock type for the App type
type App struct {
	mock.Mock
}

// CreateEvent provides a mock function with given fields: runName, event
func (_m *App) CreateEvent(runName string, event protocol.Event) error {
	ret := _m.Called(runName, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, protocol.Event) error); ok {
		r0 = rf(runName, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRun provides a mock function with given fields: namePrefix
func (_m *App) CreateRun(namePrefix string) (protocol.Run, error) {
	ret := _m.Called(namePrefix)

	var r0 protocol.Run
	if rf, ok := ret.Get(0).(func(string) protocol.Run); ok {
		r0 = rf(namePrefix)
	} else {
		r0 = ret.Get(0).(protocol.Run)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namePrefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRun provides a mock function with given fields: runName
func (_m *App) DeleteRun(runName string) error {
	ret := _m.Called(runName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(runName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetApp provides a mock function with given fields: runName
func (_m *App) GetApp(runName string) (io.Reader, error) {
	ret := _m.Called(runName)

	var r0 io.Reader
	if rf, ok := ret.Get(0).(func(string) io.Reader); ok {
		r0 = rf(runName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(runName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCache provides a mock function with given fields: runName
func (_m *App) GetCache(runName string) (io.Reader, error) {
	ret := _m.Called(runName)

	var r0 io.Reader
	if rf, ok := ret.Get(0).(func(string) io.Reader); ok {
		r0 = rf(runName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(runName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvents provides a mock function with given fields: runName, lastID
func (_m *App) GetEvents(runName string, lastID string) commands.EventIterator {
	ret := _m.Called(runName, lastID)

	var r0 commands.EventIterator
	if rf, ok := ret.Get(0).(func(string, string) commands.EventIterator); ok {
		r0 = rf(runName, lastID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(commands.EventIterator)
		}
	}

	return r0
}

// GetExitData provides a mock function with given fields: runName
func (_m *App) GetExitData(runName string) (protocol.ExitData, error) {
	ret := _m.Called(runName)

	var r0 protocol.ExitData
	if rf, ok := ret.Get(0).(func(string) protocol.ExitData); ok {
		r0 = rf(runName)
	} else {
		r0 = ret.Get(0).(protocol.ExitData)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(runName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOutput provides a mock function with given fields: runName
func (_m *App) GetOutput(runName string) (io.Reader, error) {
	ret := _m.Called(runName)

	var r0 io.Reader
	if rf, ok := ret.Get(0).(func(string) io.Reader); ok {
		r0 = rf(runName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(runName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTokenCache provides a mock function with given fields: runName
func (_m *App) GetTokenCache(runName string) (string, error) {
	ret := _m.Called(runName)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(runName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(runName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutApp provides a mock function with given fields: reader, objectSize, runName
func (_m *App) PutApp(reader io.Reader, objectSize int64, runName string) error {
	ret := _m.Called(reader, objectSize, runName)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Reader, int64, string) error); ok {
		r0 = rf(reader, objectSize, runName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutCache provides a mock function with given fields: reader, objectSize, runName
func (_m *App) PutCache(reader io.Reader, objectSize int64, runName string) error {
	ret := _m.Called(reader, objectSize, runName)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Reader, int64, string) error); ok {
		r0 = rf(reader, objectSize, runName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutOutput provides a mock function with given fields: reader, objectSize, runName
func (_m *App) PutOutput(reader io.Reader, objectSize int64, runName string) error {
	ret := _m.Called(reader, objectSize, runName)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Reader, int64, string) error); ok {
		r0 = rf(reader, objectSize, runName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartRun provides a mock function with given fields: runName, output, env, callbackURL, maxRunTime
func (_m *App) StartRun(runName string, output string, env map[string]string, callbackURL string, maxRunTime int64) error {
	ret := _m.Called(runName, output, env, callbackURL, maxRunTime)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]string, string, int64) error); ok {
		r0 = rf(runName, output, env, callbackURL, maxRunTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
