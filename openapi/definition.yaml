openapi: 3.0.1
info:
  title: Yinyo
  description: |
    A wonderfully simple API driven service to reliably execute many long running scrapers in a super scaleable way
  version: "1.0"
servers:
  - url: http://localhost:8080
    description: Local development server
tags:
  - name: Core
    description: The minimum you'll need to use
  - name: Optional
    description: Get access to more information about runs
paths:
  /runs:
    summary: Create run
    post:
      tags: ["Core"]
      summary: Create run
      description: |
        Returns with the "run ID" which uniquely identifies this run. You will need this value to subsequently start, track and access this run.
      responses:
        200:
          description: Created successfully
          content:
            "application/json":
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: |
                      Uniquely identifies this run. Needed for any subsequent API calls for this run.
              example:
                id: a9ff3b06-92c1-4150-8946-9920ea742d24
  /runs/{id}/app:
    put:
      tags: ["Core"]
      summary: Upload the code to be run and any local data
      description: |
        Take your directory with code, configuration and data to run. Tar and gzip compress it. Then use this to upload it to Yinyo.

        If you're familiar with [Heroku](https://www.heroku.com/), you'll be familiar with the way different languages are recognised and compiled because Yinyo also uses the same underlying open source technology, [Buildpacks](https://devcenter.heroku.com/articles/buildpacks).

        For different languages you'll need to include different files that tell Yinyo what language you're using as well as which version of the language you want and which libraries you want installed.

        ### Python
        For Python include `requirements.txt` in the root of your code directory. `pip` automatically uses this file to install your required libraries.

        For more information visit the [Heroku Python documentation](https://devcenter.heroku.com/articles/python-support)

        ### Node.js / Javascript
        For Node.js include `package.json` in the root of your code directory. `npm` then automatically installs required libraries from this file.

        For more information visit the [Heroku Node.js documentation](https://devcenter.heroku.com/articles/nodejs-support)

        ### Ruby
        For Ruby include `Gemfile` and `Gemfile.lock` in the root of your code directory. `bundler` installs your dependencies.

        For more information visit the [Heroku Ruby documentation](https://devcenter.heroku.com/articles/ruby-support)

        ### PHP
        For PHP include `composer.json` and `composer.lock` in the root of your code directory. `Composer` installs your libraries.

        For more information visit the [Heroku PHP documentation](https://devcenter.heroku.com/articles/php-support)

        ### Perl
        For Perl include `cpanfile`.

        As this is a non-Heroku third-party buildpack no Heroku developer documentation is available. Instead take a look at the [GitHub repo](https://github.com/miyagawa/heroku-buildpack-perl) for the buildpack.

      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/gzip:
            schema:
              type: string
              description: |
                Directory with code, configuration and data to run. Everything needs to be tarred and gzip compressed.
              format: binary
        required: true
      responses:
        200:
          description: Success
        404:
          $ref: "#/components/responses/not_found"
  /runs/{id}/cache:
    summary: Manage build cache
    put:
      tags: ["Optional"]
      summary: Upload a build cache
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/gzip:
            schema:
              description: Build cache exactly as it was downloaded before
              type: string
              format: binary
        required: true
      responses:
        200:
          description: Success
        400:
          $ref: "#/components/responses/bad_request"
        404:
          $ref: "#/components/responses/not_found"
    get:
      tags: ["Optional"]
      summary: Download a build cache
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          content:
            application/gzip:
              schema:
                description: Build cache
                type: string
                format: binary
          description: Success
        404:
          $ref: "#/components/responses/not_found"

  /runs/{id}/start:
    post:
      tags: ["Core"]
      summary: Start the run
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                output:
                  type: string
                  description: |
                    Optional relative path (from the directory of the code for the run) to file you want access to later. This will usually be the output of the run.
                env:
                  type: array
                  description: |
                    Optionally set environment variables for the run.
                  items:
                    $ref: "#/components/schemas/Env"
                callback:
                  type: string
                  format: uri
                  description: |
                    Optionally provide a callback URL. For every event a POST to the URL will be made. To be able to authenticate the callback you'll need to specify a secret in the URL. Something like http://my-url-endpoint.com?key=special-secret-stuff would do the trick
                max_run_time:
                  type: integer
                  description: |
                    Optionally set the maximum number of seconds the run is allowed to go for. If it exceeds this it will be automatically stopped.

            example:
              output: my_output.txt
              env:
                - name: MY_ENVIRONMENT_VARIABLE
                  value: foo
              callback: http://my-url-endpoint.com?key=special-secret-stuff
              max_run_time: 3600

      responses:
        200:
          description: Success
        400:
          $ref: "#/components/responses/bad_request"
        404:
          $ref: "#/components/responses/not_found"
  /runs/{id}/events:
    get:
      tags: ["Optional"]
      summary: Attach to run events stream
      description: |
        Watch what is happening to a run in real-time as it gets built and runs. By default this will stream all events that have occurred from the very beginning until now and then as new events occur stream those in real-time.
      parameters:
        - $ref: "#/components/parameters/id"
        - name: last_id
          description: Restart stream immediately after the event with the given ID
          in: query
          schema:
            type: string

      responses:
        200:
          description: Succesfully attached to stream
          content:
            "application/ld+json":
              schema:
                oneOf:
                  - $ref: "#/components/schemas/LogEvent"
                  - $ref: "#/components/schemas/StartEvent"
                  - $ref: "#/components/schemas/FinishEvent"
                  - $ref: "#/components/schemas/LastEvent"
                discriminator:
                  propertyName: type
              example:
                id: "123"
                time: "2019-12-17T03:45:00Z"
                type: log
                data:
                  stage: "build"
                  stream: "stdout"
                  text: "Hello!"
        404:
          $ref: "#/components/responses/not_found"
  /runs/{id}/exit-data:
    get:
      tags: ["Optional"]
      summary: Find out whether the run has finished and if so also return exit codes and usage metrics
      description: |
        Returns a rag-bag of useful information about the progress and completion of a run. Find out whether the run has finished and if so find out  whether the scraper ran succesfully or not. Also returns information about how much resources the run took.
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Success
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ExitData"
        404:
          $ref: "#/components/responses/not_found"

  /runs/{id}/output:
    get:
      tags: ["Optional"]
      summary: Get output file
      description: |
        Usually at the end of the run you want to grab the contents of a file which is probably the result of scraping. This allows you to do that. The path to the file needs to be given when the run is started.
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Success
          content:
            "application/octet-stream":
              schema:
                type: string
                format: binary
        404:
          $ref: "#/components/responses/not_found"
  /runs/{id}:
    delete:
      tags: ["Core"]
      summary: Finalise scraper run
      description: |
        This does final clean up of everything associated with a run. Make sure you always do this as the last API call for a run. After doing this it's not possible to get any more information about this run.
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Success
        404:
          $ref: "#/components/responses/not_found"
components:
  parameters:
    id:
      name: id
      in: path
      description: The run ID (as returned by creating a run)
      required: true
      schema:
        type: string
  responses:
    bad_request:
      description: There was a problem with your request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    not_found:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Event:
      description: Event - can be one of LogEvent, StartEvent, FinishEvent or LastEvent
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/LogEvent"
              - $ref: "#/components/schemas/StartEvent"
              - $ref: "#/components/schemas/FinishEvent"
              - $ref: "#/components/schemas/LastEvent"
            discriminator:
              propertyName: type
          example:
            id: "123"
            time: "2019-12-17T03:45:00Z"
            type: log
            data:
              stage: "build"
              stream: "stdout"
              text: "Hello!"

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
    Env:
      type: object
      properties:
        name:
          type: string
          description: |
            Name of the environment variable
        value:
          type: string
          description: |
            Value of the environment variable

    Stage:
      type: string
      description: The stage of the life-cycle of the run
      enum:
        - build
        - run
    ExitData:
      type: object
      properties:
        build:
          $ref: "#/components/schemas/ExitDataStage"
        run:
          $ref: "#/components/schemas/ExitDataStage"
        api:
          $ref: "#/components/schemas/ApiUsage"
        finished:
          type: boolean
          description: True if the run has finished either by running succesfully or by failing in the build or run stage. This occurs when the "last" event is sent.
    ExitDataStage:
      type: object
      properties:
        exit_code:
          type: number
          description: Process exit code for build or run. If there was no error this should be 0.
        usage:
          $ref: "#/components/schemas/Usage"
    Usage:
      type: object
      properties:
        max_rss:
          type: integer
          description: |
            This is the maximum resident set size used (in bytes)
        network_in:
          type: integer
          description: Total received network traffic (in bytes)
        network_out:
          type: integer
          description: Total transmitted network traffic (in bytes)
      description: |
        Resources used by a process. This information is recorded as part of the metrics for a run.
    ApiUsage:
      type: object
      properties:
        network_in:
          type: integer
          description: Total received network traffic (in bytes)
        network_out:
          type: integer
          description: Total transmitted network traffic (in bytes)
      description: |
        Network used in communicating with the API.
    Event:
      required:
        - id
        - time
        - type
        - data
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        time:
          type: string
          description: Date and time of event
          # TODO: Fix time format
          format: date-time
      discriminator:
        propertyName: type
    StartEvent:
      description: Signals the start of a stage
      allOf:
        - $ref: "#/components/schemas/Event"
        - type: object
          properties:
            data:
              type: object
              properties:
                stage:
                  $ref: "#/components/schemas/Stage"
    FinishEvent:
      description: Signals the end of a stage
      allOf:
        - $ref: "#/components/schemas/Event"
        - type: object
          properties:
            data:
              type: object
              properties:
                stage:
                  $ref: "#/components/schemas/Stage"
                exit_data:
                  $ref: "#/components/schemas/ExitDataStage"
    LastEvent:
      description: Signals the completion of the whole run
      allOf:
        - $ref: "#/components/schemas/Event"
    LogEvent:
      description: Console output event (from run)
      allOf:
        - $ref: "#/components/schemas/Event"
        - type: object
          properties:
            data:
              type: object
              properties:
                stage:
                  $ref: "#/components/schemas/Stage"
                stream:
                  type: string
                  description: |
                    Source of the message - standard output and standard error come from your code. In exceptional circumstances you might see a message from "internal error".
                  enum:
                    - stdout
                    - stderr
                    - interr
                text:
                  type: string
                  description: Console message
