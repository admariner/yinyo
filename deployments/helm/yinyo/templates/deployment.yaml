apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-server
  labels:
    app: {{ .Release.Name }}-server
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-server
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-server
      annotations:
        # Force an upgrade if the configmap or secrets are changed
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
    spec:
      serviceAccountName: {{ .Release.Name }}-server
      containers:
        - name: {{ .Release.Name }}-server
          image: {{ .Values.image }}
          ports:
            - containerPort: 8080
          env:
            - name: STORE_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-server
                  key: store_host
            - name: STORE_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-server
                  key: store_bucket
            - name: STORE_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-server
                  key: store_access_key
            - name: STORE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-server
                  key: store_secret_key
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-server
                  key: redis_host
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-server
                  key: redis_password
            - name: RUN_DOCKER_IMAGE
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-server
                  key: run_docker_image
            {{- if .Values.authenticationURL }}
            - name: AUTHENTICATION_URL
              valueFrom:
                configMapKeyRef:
                  name: yinyo-server
                  key: authentication_url
            {{ end }}
            {{- if .Values.usageURL }}
            - name: USAGE_URL
              valueFrom:
                configMapKeyRef:
                  name: yinyo-server
                  key: usage_url
            {{ end }}
          livenessProbe:
            httpGet:
              path: /
              port: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
